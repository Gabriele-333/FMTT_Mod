
plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.154'

}

tasks.named('wrapper', Wrapper).configure {
    //Define wrapper values here so as to not have to always do so when updating gradlew.properties
    gradleVersion = '8.10'
    distributionType = Wrapper.DistributionType.ALL
}


version = "${minecraft_version}-${mod_version}"
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name "Modmaven"
        url "https://modmaven.dev/"
        content {
            includeGroup 'appeng'
        }
    }
    maven {
        url "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/"
        content {
            includeGroup "com.klikli_dev"
        }
    }
    maven {
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }


}

base {
    archivesName = mod_id.toUpperCase()
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    configurations.all {
        resolutionStrategy {
            force 'org.ow2.asm:asm-analysis:9.7'
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'org.ow2.asm' && details.requested.name == 'asm-analysis' && details.requested.version == '9.5' ) {
                    details.useVersion '9.7'
                }
                if (details.requested.group == 'org.ow2.asm' && details.requested.name == 'asm-util' && details.requested.version == '9.5' ) {
                    details.useVersion '9.7'
                }
            }
        }
    }
    // applies to all the run configs below
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main


    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {

        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

//TOFIX modifies this shit pls
dependencies {

    implementation "net.neoforged:neoforge:${neo_version}"
    implementation "net.gabriele333.gabrielecore:GabrieleCore:${gc_version}"
    implementation "curse.maven:applied-energistics-2-223794:6488853"
    implementation "curse.maven:modonomicon-538392:5717209"
    implementation "curse.maven:crafttweaker-239197:5708234"
    compileOnly "curse.maven:ftb-quests-forge-289412:5882270"
    implementation "curse.maven:architectury-api-419699:5786327"
    implementation "curse.maven:ftb-teams-forge-404468:5882217"
    implementation "curse.maven:ftb-library-forge-404465:5893689"
    implementation "curse.maven:codechicken-lib-1-8-242818:6166790"
    implementation "curse.maven:jade-324717:6291517"
    implementation "curse.maven:ender-io-64578:6363527"
    implementation "curse.maven:guideme-1173950:6488254"
    implementation "curse.maven:resourceful-lib-570073:5973188"
    implementation "curse.maven:architectury-api-419699:5786327"
    implementation "curse.maven:create-328085:6323264"

    compileOnly "dev.emi:emi-neoforge:${emi_version}+1.21.1"
    runtimeOnly "dev.emi:emi-neoforge:${emi_version}+1.21.1"


}
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
